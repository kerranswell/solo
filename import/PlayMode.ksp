macro PlayMode_on_init
    struct _PlayMode
        declare rh_Muted // right hand muted articulation
        declare pickDown // sound production: 0 = pick up, 1 = pick down, ...  etc.
        declare lh_Vibrato // vibrato by left hand articulation
        declare letRing // lets string sound after release
        declare slideIn // slideIn sample triggers simultaniously with main note
        declare slideOut // slideOut sample triggers after release
        declare legato
        declare offset

        declare altStroke
        declare vibratoSpeed
        declare vibratoDepth

        declare artCode
    end struct

    declare &_PlayMode playMode // this is used for setting note play mode props at the moment new note starts,
    declare &_PlayMode playModeGlobal // this is used for keeping global play mode properties through time    

    PlayMode_initPlayMode(playMode)
    PlayMode_initPlayMode(playModeGlobal)
    playModeGlobal.slideIn := 1

end macro

macro PlayMode_initPlayMode(#p#)
    #p#.rh_Muted := 0
    #p#.pickDown := 1
    #p#.lh_Vibrato := 0
    #p#.letRing := 0
    #p#.legato := 0
    #p#.offset := 0

    #p#.slideIn := 0
    #p#.slideOut := 0

    #p#.altStroke := 1
    #p#.vibratoSpeed := VIBRATO_SPEED_DEFAULT
    #p#.vibratoDepth := 0

    #p#.artCode := 0
end macro

macro PlayMode_copy(#p#, #p2#)
    #p#.rh_Muted := #p2#.rh_Muted
    #p#.pickDown := #p2#.pickDown
    #p#.lh_Vibrato := #p2#.lh_Vibrato
    #p#.letRing := #p2#.letRing
    #p#.legato := #p2#.legato
    #p#.offset := #p2#.offset

    #p#.slideIn := #p2#.slideIn
    #p#.slideOut := #p2#.slideOut

    #p#.altStroke := #p2#.altStroke
    #p#.vibratoSpeed := #p2#.vibratoSpeed
    #p#.vibratoDepth := #p2#.vibratoDepth

    #p#.artCode := #p2#.artCode
end macro

function setPlayMode(velocity, note, string)

    playMode.lh_Vibrato := 0

    playMode.letRing := playModeGlobal.letRing
    playMode.pickDown := playModeGlobal.pickDown
    playMode.slideIn := 0
    playMode.slideOut := 0

    playMode.artCode := ArtsCodes.o_pd

    if (in_range(velocity, velocityArtZones.rh_Muted_Down[0], velocityArtZones.rh_Muted_Down[1]))
        playMode.rh_Muted := 1
        playMode.letRing := 0
        playMode.artCode := ArtsCodes.m_pd
        if (UI.pickVelocityControl = 1)
            playMode.pickDown := 1
        end if
    else if (in_range(velocity, velocityArtZones.rh_Muted_Up[0], velocityArtZones.rh_Muted_Up[1]))
        playMode.rh_Muted := 1
        playMode.letRing := 0
        playMode.artCode := ArtsCodes.m_pd
        if (UI.pickVelocityControl = 1)
            playMode.pickDown := 0
            playMode.artCode := ArtsCodes.m_pu
        end if
    else if (in_range(velocity, velocityArtZones.rh_Opened_Down[0], velocityArtZones.rh_Opened_Down[1]))
        playMode.rh_Muted := 0
        if (UI.pickVelocityControl = 1)
            playMode.pickDown := 1
        end if
    else if (in_range(velocity, velocityArtZones.rh_Opened_Up[0], velocityArtZones.rh_Opened_Up[1]))
        playMode.rh_Muted := 0
        if (UI.pickVelocityControl = 1)
            playMode.pickDown := 0
            playMode.artCode := ArtsCodes.o_pu
        end if
    else if (in_range(velocity, velocityArtZones.lh_Vibrato[0], velocityArtZones.lh_Vibrato[1]))
        playMode.pickDown := 1
        playMode.lh_Vibrato := 1
        playMode.artCode := ArtsCodes.v1
{
    else if (in_range(velocity, velocityArtZones.letRing_Up[0], velocityArtZones.letRing_Up[1]))
        playMode.letRing := 1
        playMode.rh_Muted := 0
        if (UI.pickVelocityControl = 1)
            playMode.pickDown := 0
        end if
    else if (in_range(velocity, velocityArtZones.letRing_Down[0], velocityArtZones.letRing_Down[1]))
        playMode.letRing := 1
        playMode.rh_Muted := 0
        if (UI.pickVelocityControl = 1)
            playMode.pickDown := 1
        end if
}
    end if

    playMode.legato := 0
    playMode.offset := 0
    if (playMode.rh_Muted = 0)
        playMode.legato := Playing_isOverlapping(string, note)

        if (playMode.legato = 1)
            declare r
            r := random(0, 770)
            playMode.offset := (20 + r) * 1000 // (30-800)ms
        else 
            playMode.offset := Control_getAttackSoftness()
        end if
    end if

    if (playMode.artCode = ArtsCodes.m_pd and UI.softMute = 0)
        playMode.artCode := ArtsCodes.m2_pd
    end if

    if (playMode.artCode = ArtsCodes.m_pu and UI.softMute = 0)
        playMode.artCode := ArtsCodes.m2_pu
    end if

    uiFeedbackPlayMode()

end function

function PlayMode_getVelocityByPlayMode -> result

    result := velocityArtZones.rh_Opened_Down[0]

    if (playMode.rh_Muted = 1)
        if (playMode.pickDown = 1)
            result := velocityArtZones.rh_Muted_Down[0]
        else 
            result := velocityArtZones.rh_Muted_Up[0]
        end if
    end if

    if (playMode.rh_Muted = 0)
        if (playMode.pickDown = 1)
            result := velocityArtZones.rh_Opened_Down[0]
        else 
            result := velocityArtZones.rh_Opened_Up[0]
        end if
    end if

    if (playMode.lh_Vibrato = 1)
        result := velocityArtZones.lh_Vibrato[0]
    end if

end function

macro PlayMode_change(#pm#, #type#, val)
    select (#type#)

        // vibrato
        case ExtEventType.rh_Muted
            
            if (val = 1)
                #pm#.lh_Vibrato := 0
            end if

            #pm#.rh_Muted := val


        // vibrato
        case ExtEventType.lh_Vibrato
            
            if (val = 1)
                #pm#.rh_Muted := 0
            end if

            #pm#.lh_Vibrato := val


        // let ring
        case ExtEventType.letRing

            if (val = 1)
                #pm#.rh_Muted := 0
            end if

            #pm#.letRing := val

        // slide in
        case ExtEventType.slideIn

            #pm#.slideIn := val
            #pm#.offset := 0

    end select
end macro

{function PlayMode_change(type, val)

    select (type)

        // vibrato
        case ExtEventType.rh_Muted
            
            if (val = 1)
                playMode.lh_Vibrato := 0
            end if

            playMode.rh_Muted := val


        // vibrato
        case ExtEventType.lh_Vibrato
            
            if (val = 1)
                playMode.rh_Muted := 0
            end if

            playMode.lh_Vibrato := val


        // let ring
        case ExtEventType.letRing

            if (val = 1)
                playMode.rh_Muted := 0
            end if

            playMode.letRing := val

        // slide in
        case ExtEventType.slideIn

            playModeGlobal.slideIn := val

    end select

end function

function playModeGlobal_change(type, val)

    select (type)

        // vibrato
        case ExtEventType.lh_Vibrato
            
            if (val = 1)
                playModeGlobal.rh_Muted := 0
            end if

            playModeGlobal.lh_Vibrato := val


        // let ring
        case ExtEventType.letRing

            if (val = 1)
                playModeGlobal.rh_Muted := 0
            end if

            playModeGlobal.letRing := val

        // slide in
        case ExtEventType.slideIn

            playModeGlobal.slideIn := val

    end select

end function
}