macro PlayMode_on_init
    struct _PlayMode
        declare rh_Muted // right hand muted articulation
        declare pickDown // sound production: 0 = pick up, 1 = pick down, ...  etc.
        declare lh_Vibrato // vibrato by left hand articulation
        declare letRing // lets string sound after release
        declare slideIn // slideIn sample triggers simultaniously with main note
        declare slideOut // slideOut sample triggers after release
        declare legato
        declare offset
        declare duration

        declare artCode
    end struct

    struct _PlayModeGlobal
        declare &_PlayMode pm
        declare altStroke := 1
        declare pos := 5 // left hand position
        declare vibratoSpeed := VIBRATO_SPEED_DEFAULT
        declare vibratoDepth := 0
    end struct

    declare &_PlayMode playMode // this is used for setting note play mode props at the moment new note starts,
    declare &_PlayModeGlobal playModeGlobal // this is used for keeping global play mode properties through time    

    PlayMode_resetPlayMode(playMode)
    PlayMode_resetPlayMode(playModeGlobal.pm)
    playModeGlobal.pm.slideIn := 0

    // declare zones[ArtsCodes.SIZE, 128, 3, Const.stringCount, Const.fretCount]
    // PlayMode_loadZoneIds()

end macro

{
function PlayMode_loadZoneIds
    declare j
    declare k
    declare @zone_name
    for j := 0 to 127
        for k:= 0 to Globals.takeCounts[ArtsCodes.so]-1
            @zone_name := PlayMode_getZoneName()
        end for
        zones[ArtsCodes.so, j, k] := 
    end for
end function

function PlayMode_getZoneName(string, fret, _note, takeIndex) -> result
    declare v1
    declare v2
    declare @note
    note := noteName(_note)
    v1 := (string-1) * Globals.maxGroups + 1
    v2 := string * Globals.maxGroups
    result := "f" & fret & "s" & string & "_" & @note & "_" & v1 & "-" & v2 & "_si_" & "t" & takeIndex & FILE_EXT    
end function
}

macro PlayMode_resetPlayMode(#p#)
    #p#.rh_Muted := 0
    #p#.pickDown := 1
    #p#.lh_Vibrato := 0
    #p#.letRing := 0
    #p#.legato := 0
    #p#.offset := 0
    #p#.duration := -1

    #p#.slideIn := 0
    #p#.slideOut := 0

    #p#.artCode := 0
end macro

macro PlayMode_copy(#p#, #p2#)
    #p#.rh_Muted := #p2#.rh_Muted
    #p#.pickDown := #p2#.pickDown
    #p#.lh_Vibrato := #p2#.lh_Vibrato
    #p#.letRing := #p2#.letRing
    #p#.legato := #p2#.legato
    #p#.offset := #p2#.offset
    #p#.duration := #p2#.duration

    #p#.slideIn := #p2#.slideIn
    #p#.slideOut := #p2#.slideOut

    #p#.artCode := #p2#.artCode
end macro

function setPlayMode(velocity, string, note)

    PlayMode_resetPlayMode(playMode)

    playMode.lh_Vibrato := 0

    playMode.letRing := playModeGlobal.pm.letRing
    playMode.pickDown := playModeGlobal.pm.pickDown
    playMode.slideIn := 0
    playMode.slideOut := 0

{     if (playMode.letRing = 1)
        playMode.duration := 0
    end if
 }
    playMode.artCode := ArtsCodes.o_pd

    if (in_range(velocity, velocityArtZones.rh_Muted_Down[0], velocityArtZones.rh_Muted_Down[1]))
        playMode.rh_Muted := 1
        playMode.letRing := 0
        playMode.artCode := ArtsCodes.m_pd
        if (UI.pickVelocityControl = 1)
            playMode.pickDown := 1
        end if
    else if (in_range(velocity, velocityArtZones.rh_Muted_Up[0], velocityArtZones.rh_Muted_Up[1]))
        playMode.rh_Muted := 1
        playMode.letRing := 0
        playMode.artCode := ArtsCodes.m_pd
        if (UI.pickVelocityControl = 1)
            playMode.pickDown := 0
            playMode.artCode := ArtsCodes.m_pu
        end if
    else if (in_range(velocity, velocityArtZones.rh_Opened_Down[0], velocityArtZones.rh_Opened_Down[1]))
        playMode.rh_Muted := 0
        if (UI.pickVelocityControl = 1)
            playMode.pickDown := 1
        end if
    else if (in_range(velocity, velocityArtZones.rh_Opened_Up[0], velocityArtZones.rh_Opened_Up[1]))
        playMode.rh_Muted := 0
        if (UI.pickVelocityControl = 1)
            playMode.pickDown := 0
            playMode.artCode := ArtsCodes.o_pu
        end if
    else if (in_range(velocity, velocityArtZones.lh_Vibrato[0], velocityArtZones.lh_Vibrato[1]))
        playMode.pickDown := 1
        playMode.lh_Vibrato := 1
        playMode.artCode := ArtsCodes.v1
{
    else if (in_range(velocity, velocityArtZones.letRing_Up[0], velocityArtZones.letRing_Up[1]))
        playMode.letRing := 1
        playMode.rh_Muted := 0
        if (UI.pickVelocityControl = 1)
            playMode.pickDown := 0
        end if
    else if (in_range(velocity, velocityArtZones.letRing_Down[0], velocityArtZones.letRing_Down[1]))
        playMode.letRing := 1
        playMode.rh_Muted := 0
        if (UI.pickVelocityControl = 1)
            playMode.pickDown := 1
        end if
}
    end if

    playMode.legato := 0
    playMode.offset := 0
    if (playMode.rh_Muted = 0)
        playMode.legato := Playing_isOverlapping(string, note)

        if (playMode.legato = 1)
            declare r
            r := random(0, 770)
            playMode.offset := (20 + r) * 1000 // (30-800)ms
        else 
            playMode.offset := Control_getAttackSoftness()
        end if
    end if

    if (playMode.artCode = ArtsCodes.m_pd and UI.softMute = 0)
        playMode.artCode := ArtsCodes.m2_pd
    end if

    if (playMode.artCode = ArtsCodes.m_pu and UI.softMute = 0)
        playMode.artCode := ArtsCodes.m2_pu
    end if

    uiFeedbackPlayMode()

end function

{function PlayMode_getVelocityByPlayMode(i) -> result

    result := velocityArtZones.rh_Opened_Down[0]

    if (playMode.rh_Muted = 1)
        if (playMode.pickDown = 1)
            result := velocityArtZones.rh_Muted_Down[0]
        else 
            result := velocityArtZones.rh_Muted_Up[0]
        end if
    end if

    if (playMode.rh_Muted = 0)
        if (playMode.pickDown = 1)
            result := velocityArtZones.rh_Opened_Down[0]
        else 
            result := velocityArtZones.rh_Opened_Up[0]
        end if
    end if

    if (playMode.lh_Vibrato = 1)
        result := velocityArtZones.lh_Vibrato[0]
    end if

end function
}

macro PlayMode_change(#pm#, #type#, val)
    select (#type#)

        // vibrato
        case ExtEventType.rh_Muted
            
            if (val = 1)
                #pm#.lh_Vibrato := 0
            end if

            #pm#.rh_Muted := val


        // vibrato
        case ExtEventType.lh_Vibrato
            
            if (val = 1)
                #pm#.rh_Muted := 0
            end if

            #pm#.lh_Vibrato := val


        // let ring
        case ExtEventType.letRing

            if (val = 1)
                #pm#.rh_Muted := 0
            end if

            #pm#.letRing := val

        // slide in
        case ExtEventType.slideIn

            #pm#.slideIn := val
            #pm#.offset := 0

    end select
end macro

function PlayMode_nextNoteInit

    if (playModeGlobal.altStroke = 1 and UI.pickVelocityControl = 0)
        if (playModeGlobal.pm.pickDown = 1)
            playModeGlobal.pm.pickDown := 0
        else 
            playModeGlobal.pm.pickDown := 1
        end if
    end if
end function

function PlayMode_setOpString(j)
    if (Globals.opStringAuto = 1)
        declare set_new := 1
        declare i

        for i := 0 to Globals.maxVoices-1
            if (Playing[i].sys # -1 and Playing[i].active = 1)
                // if pitch bend already in process, leave opString at old value.
                // if pitch bend is zero - no bends at the moment - then opString becomes new note string
                // ver1: but if 2 notes started simultaniously then choose string which is lower (4 is lower than 3)
                // ver2: if 2 notes started simultaniously - we bend all strings - opString becomes 0
                // if (Globals.pitchBend # 0 or (Playing[i].gn.string = Globals.opString and Playing[i].gn.string > Playing[j].gn.string and Playing[i].startTime = Playing[j].startTime))
                if (Globals.pitchBend # 0)
                    set_new := 0
                    break(i, Globals.maxVoices)
                else if (abs(Playing[i].startTime - Playing[j].startTime) <= 5)
                    // notes_playing := 1
                    if (abs(Playing[i].gn.note - Playing[j].gn.note) <= 6 and Playing[i].gn.string > Playing[j].gn.string) 
                        set_new := 0
                    end if
                end if
            end if
        end for

        if (set_new = 1)
            Globals.opString := Playing[j].gn.string
        end if

    end if
end function
