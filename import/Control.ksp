on ui_control (UI.rh_Muted)
    extControl(ExtEventType.rh_Muted, UI.rh_Muted)
end on

on ui_control (UI.lh_Vibrato)
    extControl(ExtEventType.lh_Vibrato, UI.lh_Vibrato)
end on

on ui_control (UI.altStroke)
    extControl(ExtEventType.altStroke, UI.altStroke)
end on

on ui_control (UI.letRing)
    extControl(ExtEventType.letRing, UI.letRing)
end on

on ui_control (UI.vibratoSpeed)
    extControl(ExtEventType.vibratoSpeed, UI.vibratoSpeed)
end on

on ui_control (UI.vibratoDepth)
    extControl(ExtEventType.vibratoDepth, UI.vibratoDepth)
end on

on ui_control (UI.debugClear)
    debug_clear()
    debug2_clear()

    UI.debugClear := 0
end on

function extControl(etype, value)

    declare ev
    declare i

    select etype

        case ExtEventType.letRing
            PlayModeGlobal.letRing := value

        case ExtEventType.rh_Muted
            PlayModeGlobal.rh_Muted := value

        case ExtEventType.altStroke
            PlayModeGlobal.altStroke := value

        case ExtEventType.lh_Vibrato
            PlayModeGlobal.lh_Vibrato := value

        case ExtEventType.vibratoSpeed
            PlayModeGlobal.vibratoSpeed := value

        case ExtEventType.vibratoDepth
            if (PlayModeGlobal.vibratoDepth = 0 and value > 0)
                // starting vibrato cycle
                for i := 0 to num_elements(Playing.sys)-1
                    if (Playing.sys[i] # -1 and Playing.ghost[i] = 0)
                        Playing_startVibratoCycle(i)
                    end if
                end for
            else if (PlayModeGlobal.vibratoDepth > 0 and value = 0)
                // ending vibrato cycle
                for i := 0 to num_elements(Playing.sys)-1
                    if (Playing.sys[i] # -1 and Playing.ghost[i] = 0 and Playing.to_vibrato[i] # -1)
                        Playing.to_vibrato[i] := -1
                        change_tune(Playing.sys[i], 0, 0)
                    end if
                end for                
            end if

            PlayModeGlobal.vibratoDepth := value


{        case ExtEventType.vibratoSpeed

            declare group_index

            for i := 1 to Globals.takeCounts[ArtsCodes.v1]
                group_index := find_group("v1_t" & i)
                ev := Math.epSpeed(Math.V2E, (value + 100) * 10)
                set_engine_par($ENGINE_PAR_SPEED, ev, group_index, -1, -1)
            end for
}
    end select

    uiFeedback(etype, value)
end function

function uiFeedback(etype, value)
    if (etype = ExtEventType.letRing and UI.letRing # value)
        UI.letRing := value
    else if (etype = ExtEventType.rh_Muted and UI.rh_Muted # value)
        UI.rh_Muted := value
    else if (etype = ExtEventType.altStroke and UI.altStroke # value)
        UI.altStroke := value
    else if (etype = ExtEventType.lh_Vibrato and UI.lh_Vibrato # value)
        UI.lh_Vibrato := value
    else if (etype = ExtEventType.vibratoSpeed)
        UI.vibratoSpeed := value
    else if (etype = ExtEventType.vibratoDepth)
        UI.vibratoDepth := value
    end if
end function

function uiFeedbackPlayMode
    uiFeedback(ExtEventType.letRing, PlayModeGlobal.letRing)
    uiFeedback(ExtEventType.rh_Muted, PlayModeGlobal.rh_Muted)
    uiFeedback(ExtEventType.altStroke, PlayModeGlobal.altStroke)
    uiFeedback(ExtEventType.lh_Vibrato, PlayModeGlobal.lh_Vibrato)
end function

on controller
// debug("Before CC")
// debug_Playing()
    select ($CC_NUM)

        { Alt Stroke }
        case 20
            if (%CC[$CC_NUM] > 0)
                PlayModeGlobal.pickDown := 0 {every cc event should start pick down. As pickDown inverts on note start we should set it in 0}
                PlayModeGlobal.altStroke := 1
                UI.pickVelocityControl := 0
            else
                PlayModeGlobal.pickDown := 1
                PlayModeGlobal.altStroke := 0
                UI.pickVelocityControl := 1
            end if

        { Vibrato Trigger }
        case 21
            if (in_range(%CC[$CC_NUM], 1, 127))
                Playing_vibratoTrigger(1)
            else 
                Playing_vibratoTrigger(0)
            end if

        { Stop Strings }
        case 22
            if (in_range(%CC[$CC_NUM], 1, 6))
                stopNotesOnString(%CC[$CC_NUM])
            else
                stopAllNotes()
            end if

        { Let Ring }
        case 23
            if (%CC[$CC_NUM] = 0)
                PlayModeGlobal_change(ExtEventType.letRing, 0)
            else
                PlayModeGlobal_change(ExtEventType.letRing, 1)
            end if

        { Vibrato Speed }
        case 24
            extControl(ExtEventType.vibratoSpeed, %CC[$CC_NUM])

        { Vibrato Depth }
        case 25
            extControl(ExtEventType.vibratoDepth, %CC[$CC_NUM])

    end select

    {debug_clear()
    debug_Strings()}
    // debug("After CC")
    // debug_Playing()
    uiFeedbackPlayMode()
end on

on listener
    select $NI_SIGNAL_TYPE
        case $NI_SIGNAL_TRANSP_STOP
            stopAllNotes()

        case $NI_SIGNAL_TIMER_MS
            // happens every 1ms
            
            timeOperations()

    end select
end on

function Control_getAttackSoftness() -> result
    result := UI.attackSoftness * 300
end function

function timeOperations()
    declare i
    declare now := Funcs.Time_getCurrentTime() // ms

    for i := 0 to num_elements(Playing.sys)-1

        if (Playing.sys[i] # -1 and Playing.ghost[i] = 0)
{
            if (Playing.to_fadeIn[i] # -1 and Playing.active[i] = 1)

                if (now - (Playing.startTime[i] + Playing.to_fadeIn[i]) >= timeOperationPeriods.fadeIn)

                    declare offset
                    offset := Funcs.Time_linear(timeOperationValues.fadeIn_start, timeOperationValues.fadeIn_end, timeOperationTotals.fadeIn) * timeOperationPeriods.fadeIn
                    if (Playing.to_fadeIn[i] >= timeOperationTotals.fadeIn)
                        change_vol(Playing.sys[i], timeOperationValues.fadeIn_end, 0) // increasing by 1db
                        Playing.to_fadeIn[i] := -1
                    else 
                        change_vol(Playing.sys[i], offset, 1) // increasing by 1db
                        Playing.to_fadeIn[i] := Playing.to_fadeIn[i] + timeOperationPeriods.fadeIn
                    end if

                end if

            end if
}

            if (Playing.to_vibrato[i] # -1)
                if (now - (Playing.startTime[i] + Playing.to_vibrato[i]) >= timeOperationPeriods.vibrato)

                    declare val
                    declare speed := PlayModeGlobal.vibratoSpeed

                    if (speed = 0)
                        val := 0
                    else 
                        declare alpha := Playing.to_vibrato[i] * (9000 / (101 - speed)) // 9000 because of degree type; 500
                        declare a := (timeOperationValues.vibratoDepthMax / 100) * PlayModeGlobal.vibratoDepth
                        val := Math.Sin(alpha)
                        val := val * (a / 10000) // sin returns from -10^4 to 10^4
                    end if                    

                    change_tune(Playing.sys[i], val, 0)
                    Playing.to_vibrato[i] := Playing.to_vibrato[i] + timeOperationPeriods.vibrato

                end if
            end if

        end if

    end for    
end function
