on ui_control (UI.rh_Muted)
    extControl(ExtEventType.rh_Muted, UI.rh_Muted)
        debug_Hits()

end on

{ on ui_control (UI.vibratoNatural)
    extControl(ExtEventType.vibratoNatural, UI.vibratoNatural)
end on
 }
on ui_control (UI.ghostNoise)
    extControl(ExtEventType.ghostNoise, UI.ghostNoise)
end on

on ui_control (UI.lhNoise)
    extControl(ExtEventType.lhNoise, UI.lhNoise)
end on

on ui_control (UI.altStroke)
    extControl(ExtEventType.altStroke, UI.altStroke)
end on

on ui_control (UI.tapping)
    extControl(ExtEventType.tapping, UI.tapping)
end on

on ui_control (UI.slide)
    extControl(ExtEventType.slide, UI.slide)
end on

on ui_control (UI.letRing)
    extControl(ExtEventType.letRing, UI.letRing)
end on

on ui_control (UI.vibratoSpeed)
    extControl(ExtEventType.vibratoSpeed, UI.vibratoSpeed)
end on

on ui_control (UI.vibratoDepth)
    extControl(ExtEventType.vibratoDepth, UI.vibratoDepth)
end on

on ui_control (UI.pos)
    Globals.posDefault := UI.pos
    extControl(ExtEventType.pos, UI.pos)    
end on

on ui_control (UI.debugClear)
    debug_clear()
    debug2_clear()

    // save_array(%zone_lengths, 1)
end on

on ui_control (UI.duration)
    extControl(ExtEventType.duration, UI.duration)
end on

on ui_control (UI.fretboard)
    UI.fretboard->value := 1
end on

macro mUI_Hit_callback(#n#)
    on ui_control (UI.hits.obj#n#)
        UI.hits[#n#].obj->value := 1
    end on    
end macro
iterate_macro(mUI_Hit_callback) := 0 to MAX_SIMULTANEOUS_NOTES-1
 
function extControl(etype, value)
// TODO : check if previous value of a control equals the new one then do nothing. Optimizing.
    declare ev
    declare i

    select etype

        case ExtEventType.letRing
            playModeGlobal.pm.letRing := value

        case ExtEventType.rh_Muted
            playModeGlobal.pm.rh_Muted := value

        case ExtEventType.altStroke
            playModeGlobal.altStroke := value

        case ExtEventType.slide
            playModeGlobal.slide := value
            if (value = 0)
                Globals.slideStarted := 0
            else 
                Globals.slideStarted := 1
            end if

        case ExtEventType.tapping
            playModeGlobal.tapping := value
            if (value = 0)
                Globals.tappingStarted := 0
            else
                Globals.tappingStarted := 1
            end if

        case ExtEventType.forceFret
            playModeGlobal.forceFret := value

        case ExtEventType.pos
            declare old_val
            old_val := playModeGlobal.pos
            playModeGlobal.pos := value

            if (old_val # value)
                declare isPlaying
                isPlaying := Playing_isPlayingSomething()
                if (isPlaying = 0)
                    Board_resetLastNote()
                end if                
            end if

        case ExtEventType.duration
            playModeGlobal.altStrokeInterval := value

        case ExtEventType.vibratoNatural
            if (playModeGlobal.vibratoNatural = 1)
                playModeGlobal.vibratoNatural := 0
            else 
                playModeGlobal.vibratoNatural := 1
            end if
            // Playing_vibratoTrigger(playModeGlobal.vibratoNatural)
            // playModeGlobal.pm.lh_Vibrato := value

        case ExtEventType.vibratoSpeed
            playModeGlobal.vibratoSpeed := value

        case ExtEventType.ghostNoise
            Playing_changeGhostNoiseVolume(value)

        case ExtEventType.lhNoise
            Playing_changeLHNoiseVolume(value)

        case ExtEventType.vibratoDepth

            if (playModeGlobal.vibratoDepth # value)

                for i := 0 to Globals.maxVoices-1
                    if (Playing[i].sys # -1 and Playing[i].playMode.lh_Vibrato = 1)
                        declare ev
                        ev := getEngineLHVibratoSpeed(value)
                        set_engine_par($ENGINE_PAR_SPEED, ev, Playing[i].groupIndex, -1, -1)                    
                    end if
                end for

                if (playModeGlobal.vibratoDepth = 0 and value > 0)

                    if (playModeGlobal.vibratoNatural = 1)
                        Playing_vibratoTrigger(1)
                    end if

                    // starting vibrato cycle
                    for i := 0 to Globals.maxVoices-1
                        if (Playing[i].sys # -1 and Playing[i].playmode.lh_Vibrato = 0)
                            Playing_startVibratoCycle(i)
                        end if
                    end for
                else if (playModeGlobal.vibratoDepth > 0 and value = 0)
                    if (playModeGlobal.vibratoNatural = 1)
                        Playing_vibratoTrigger(0)
                    end if

                    // ending vibrato cycle
                    for i := 0 to Globals.maxVoices-1
                        if (Playing[i].sys # -1 and Playing[i].timeOp.vibrato # -1)
                            Playing[i].timeOp.vibrato := -1
                            Playing_changeTune(i, 0, 0, TuneTypes.vibrato)
                        end if
                    end for                
                end if

                playModeGlobal.vibratoDepth := value
            end if

        case ExtEventType.triggerPT
            Globals.opString := value
            // declare string
            // string := value
            // for i := 0 to Globals.maxVoices-1
            //     if (Playing[i].sys # -1)

            //         // starting Time operation
            //         Playing_startPitchTableCycle(i, string)
            //     end if
            // end for

        case ExtEventType.pitchBend
            Globals.pitchBend := Funcs.getPitchBend(value)
            Globals.pitchBendRaw := value
            for i := 0 to Globals.maxVoices-1
                if (Playing[i].sys # -1)
                    Playing_changeTune(i, Globals.pitchBend, 0, TuneTypes.bend)
                end if
            end for

{         case ExtEventType.slideIn
            PlayMode_change(playModeGlobal.pm, ExtEventType.slideIn, value)

        case ExtEventType.slideOut
            PlayMode_change(playModeGlobal.pm, ExtEventType.slideOut, value)
 }

{        case ExtEventType.vibratoSpeed

            declare group_index

            for i := 1 to Globals.takeCounts[ArtsCodes.v1]
                group_index := find_group("v1_t" & i)
                ev := Math.epSpeed(Math.V2E, (value + 100) * 10)
                set_engine_par($ENGINE_PAR_SPEED, ev, group_index, -1, -1)
            end for
}
    end select

    uiFeedback(etype, value)
end function

function uiFeedback(etype, value)
    declare i
    if (etype = ExtEventType.letRing and UI.letRing # value)
        UI.letRing := value
    else if (etype = ExtEventType.rh_Muted and UI.rh_Muted # value)
        UI.rh_Muted := value
    else if (etype = ExtEventType.altStroke and UI.altStroke # value)
        UI.altStroke := value
    else if (etype = ExtEventType.tapping and UI.tapping # value)
        UI.tapping := value
{     else if (etype = ExtEventType.vibratoNatural and UI.vibratoNatural # value)
        UI.vibratoNatural := value
 }    else if (etype = ExtEventType.vibratoSpeed)
        UI.vibratoSpeed := value
    else if (etype = ExtEventType.vibratoDepth)
        UI.vibratoDepth := value
    else if (etype = ExtEventType.pos)
        UI.pos := value
    else if (etype = ExtEventType.slide)
        UI.slide := value
    else if (etype = ExtEventType.duration)
        UI.duration := value
    end if
end function

on controller
    onController()
end on

function onController
// debug("Before CC")
// debug_Playing()
    declare v
    select ($CC_NUM)

        { Alt Stroke }
        case 20
            if (%CC[$CC_NUM] > 0)
                message(%CC[$CC_NUM])
                playModeGlobal.altStroke := 1
            else
                playModeGlobal.altStroke := 0
            end if
            extControl(ExtEventType.altStroke, playModeGlobal.altStroke)

        { Vibrato Trigger }
        case 21
            if (in_range(%CC[$CC_NUM], 1, 127))
                Playing_vibratoTrigger(1)
            else 
                Playing_vibratoTrigger(0)
            end if
            uiFeedback(ExtEventType.vibratoNatural, playModeGlobal.pm.lh_Vibrato)   

        { Stop Strings }
        case 22
            if (in_range(%CC[$CC_NUM], 1, 6))
                Playing_stopNotesOnString(%CC[$CC_NUM])
            else
                Playing_stopAllNotes()
            end if

        { Let Ring }
        case 23
            if (%CC[$CC_NUM] = 0)
                PlayMode_change(playModeGlobal.pm, ExtEventType.letRing, 0)
            else
                PlayMode_change(playModeGlobal.pm, ExtEventType.letRing, 1)
            end if
            uiFeedback(ExtEventType.letRing, playModeGlobal.pm.letRing)

        { Vibrato Speed }
        case 24
            extControl(ExtEventType.vibratoSpeed, %CC[$CC_NUM])

        { Vibrato Depth }
        case 1
            extControl(ExtEventType.vibratoDepth, %CC[$CC_NUM])

        { Slide [ In / Out / Up / Down ] Speed }
        case 26
            extControl(ExtEventType.slide, %CC[$CC_NUM])
            // playModeGlobal.slideSpeed := %CC[$CC_NUM]
{             extControl(ExtEventType.slideOut, %CC[$CC_NUM])
            extControl(ExtEventType.slideIn, %CC[$CC_NUM])
 }
{             declare v := %CC[$CC_NUM] - 64
            if (v > 0) 
                v := (64 - v) * 2
            else 
                v := 0
            end if
            extControl(ExtEventType.slideOut, v)

            v := %CC[$CC_NUM]
            if (v <= 64 and v > 0)
                v := v * 2 - 1
            else 
                v:= 0
            end if
            extControl(ExtEventType.slideIn, v)
 }
        { Slide Up / Down Speed }
{         case 27
            playModeGlobal.slideSpeed := %CC[$CC_NUM]
 }
        {  String chooser }
        case 28
            Globals.opStringAuto := 1
            v := %CC[$CC_NUM] / 10
            if (v > 0 and v <= Const.stringCount)
                Globals.opStringAuto := 0
                Globals.opString := v
            else if (v > Const.stringCount)
                Globals.opStringAuto := 0
                Globals.opString := 0
            else if (v = 0)
                Globals.opStringAuto := 1
                // extControl(ExtEventType.triggerPT, v)
            end if

        { Pos }
        case 29
            Globals.posDefault := %CC[$CC_NUM]
            extControl(ExtEventType.pos, %CC[$CC_NUM])

        { Force Fret }
        case 31
            v := %CC[$CC_NUM] - 100
            if (v < 0 or v > Const.fretCount-1)
                v := -1
            end if
            extControl(ExtEventType.forceFret, v)

        { Pitch Bend Natural }
        case 30
            debug2("CC 30: " & %CC[$CC_NUM])
            v := %CC[$CC_NUM]
            if (v >= 11 and v <= 14) 
                v := 10 - v
            else if (v < 1 or v > 4)
                v := 0
            end if
            Globals.pitchBendNatural := v
            extControl(ExtEventType.pitchBendNatural, v)

        { pitch bend }
        case 128
            extControl(ExtEventType.pitchBend, %CC[$CC_NUM])

    end select

end function

on listener
    select $NI_SIGNAL_TYPE
        case $NI_SIGNAL_TRANSP_STOP
            Playing_stopAllNotes()
            playModeGlobal.lastNoteStart := -1
            Globals.opStringAuto := 1
            Globals.tappingStarted := 0
            Globals.slideStarted := 0
            extControl(ExtEventType.pos, Globals.posDefault)
            extControl(ExtEventType.pitchBend, 0)
            extControl(ExtEventType.triggerPT, 0)
            extControl(ExtEventType.vibratoDepth, 0)
            extControl(ExtEventType.vibratoSpeed, VIBRATO_SPEED_DEFAULT)
            extControl(ExtEventType.pitchBendNatural, 0)
            // UI_Hit_resetAll()
            Durations_switch(0)
            mGuitarNote_reset(lastNote)
            mGuitarNote_reset(nextNote)
            Strings_resetAll()

        case $NI_SIGNAL_TRANSP_START
            Durations_switch(1)

        case $NI_SIGNAL_TIMER_MS
            // happens every 1ms
            timeOperations()
            // altStroke()

    end select
end on

function altStroke
    declare now := Funcs.Time_getCurrentTime() // ms
    // if (now - )
end function

function Control_getpickNoise() -> result
    result := (100 - UI.pickNoise) * 400
end function

function timeOperations()
    declare i
    declare now := Funcs.Time_getCurrentTime() // ms

    // debug_Playing()

    // Events

    for i := 0 to Globals.maxEvents-1

        if (Event[i].type # -1 and now - Event[i].createTime > Event[i].fireDelay)

            select (Event[i].type)

                case EventType.afterNoteNoise
                    declare j
                    j := Event[i].value

                    if (Playing[j].sys # -1 and Playing[j].playmode.afterNoteNoise = 1)
                        declare vol            
                        vol := getGhostNoiseVolume(UI.ghostNoise)
                        change_vol(Playing[j].sys, vol, 0)
                    end if

            end select

            Event_resetItem(i)
        end if

    end for


    for i := 0 to Globals.maxVoices-1

        if (Playing[i].sys # -1)
            declare length
            declare zlen

            if (Playing[i].ghost = 1)
                zlen := Playing_transformZoneLength(i)
                if (now - Playing[i].startTime >= zlen)
                    Playing_stopNote(i)
                end if
            end if

// debug2(i & ":: " & Playing[i].playmode.pickNoise & ", " & Playing[i].active)
            if (Playing[i].playmode.pickNoise > 0 and Playing[i].active = 1)
                zlen := Playing[i].zone.length / 1000
                if (zlen = 0) 
                    zlen := 40
                end if
                length := (UI.pickNoise * zlen) / 100
                // debug2(i & " len: " & length)
                if (now - Playing[i].startTime >= length)
                    // debug2("pn off, " & i)
                    note_off(Playing[i].sys)
                end if                
            end if

            if (Playing[i].playMode.slideIn > 0 and Playing[i].active = 1)
                length := Playing_transformZoneLength(i)
                if (now - Playing[i].startTime >= length)
                    note_off(Playing[i].sys)
                end if
            end if

            if ((Playing[i].playMode.slideUp # 0 or Playing[i].playMode.slideDown # 0 or Playing[i].playMode.slideUp2 # 0 or Playing[i].playMode.slideDown2 # 0) and Playing[i].active = 1)
                zlen := Playing[i].zone.length / 1000
                declare pos
                if (zlen = 0) 
                    zlen := 400
                end if
                pos := get_event_par(Playing[i].sys, $EVENT_PAR_PLAY_POS) / 1000

                if ({ now - Playing[i].startTime >= length or  }pos > zlen-50)
                    note_off(Playing[i].sys)
                end if
            end if

{
            if (Playing[i].timeOp.fadeIn # -1 and Playing[i].active = 1)

                if (now - (Playing[i].startTime + Playing[i].timeOp.fadeIn) >= timeOperationPeriods.fadeIn)

                    declare offset
                    offset := Funcs.Time_linear(timeOperationValues.fadeIn_start, timeOperationValues.fadeIn_end, timeOperationTotals.fadeIn) * timeOperationPeriods.fadeIn
                    if (Playing[i].timeOp.fadeIn >= timeOperationTotals.fadeIn)
                        change_vol(Playing[i].sys, timeOperationValues.fadeIn_end, 0) // increasing by 1db
                        Playing[i].timeOp.fadeIn := -1
                    else 
                        change_vol(Playing[i].sys, offset, 1) // increasing by 1db
                        Playing[i].timeOp.fadeIn := Playing[i].timeOp.fadeIn + timeOperationPeriods.fadeIn
                    end if

                end if

            end if
}

            Globals.vibratoTune := 0
            if (Playing[i].timeOp.vibrato # -1)
                if (now - (Playing[i].startTime + Playing[i].timeOp.vibrato) >= timeOperationPeriods.vibrato)

                    declare val
                    declare speed := playModeGlobal.vibratoSpeed

                    if (speed = 0)
                        val := 0
                    else 
                        declare alpha := Playing[i].timeOp.vibrato * (9000 / (101 - speed)) // 9000 because of degree type; 500
                        declare a := (timeOperationValues.vibratoDepthMax / 100) * playModeGlobal.vibratoDepth
                        val := Sin(alpha)
                        val := val * (a / 10000) // sin returns from -10^4 to 10^4
                    end if                    

                    Globals.vibratoTune := val

                    Playing_changeTune(i, val, 0, TuneTypes.vibrato)
                    Playing[i].timeOp.vibrato := Playing[i].timeOp.vibrato + timeOperationPeriods.vibrato

                end if
            end if

            if (Playing[i].playMode.pitchBendNatural # 0 and Playing[i].timeOp.pitchBendReturned = 0)
                declare d
                d := getPBDelimiter(Playing[i].eventVelocity)
                if (now - Playing[i].startTime >= d)
                    declare ev
                    ev := epSpeed(V2E, 1000)
                    set_engine_par($ENGINE_PAR_SPEED, ev, Playing[i].groupIndex, -1, -1)
                    Playing[i].timeOp.pitchBendReturned := 1
                end if
            end if

{            if (Playing[i].timeOp.pitchTable # -1)

                declare timer := now - Playing[i].timeOp.pitchTable
                declare totalStepCount
                totalStepCount := pitchTables[Globals.pitchTableIndex].timeLength * 100 / timeOperationPeriods.pitchTable // time length is in range 1-100, which is 0.1-10 seconds. In order to get milliseconds - multiply by 100

                if (timer >= totalStepCount)
                    Playing[i].timeOp.pitchTable := -1 // time operation finished
                else if (timer mod timeOperationPeriods.pitchTable = 0)

                    declare columnStepCount := totalStepCount / Const.pitchTableColumnCount

                    declare val
                    declare val_next := 0
                    declare column_index := timer / (columnStepCount * timeOperationPeriods.pitchTable)
                    declare cur_step := (timer / timeOperationPeriods.pitchTable) mod columnStepCount

                    val := pitchTables[Globals.pitchTableIndex].columns[column_index]

                    if (column_index < Const.pitchTableColumnCount-1)
                        val_next := pitchTables[Globals.pitchTableIndex].columns[column_index+1]
                    end if

                    val := pitchTables[Globals.pitchTableIndex].pitchRange * val + (pitchTables[Globals.pitchTableIndex].pitchRange * (val_next - val) / columnStepCount) * cur_step

                    Playing_changeTune(i, val, 0)

                end if

            end if
}            

        end if

    end for    
end function
